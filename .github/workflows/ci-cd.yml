name: User Management API CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Run tests
      run: dotnet test --no-build --verbosity normal --configuration Release --logger trx --results-directory TestResults/
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: .NET Tests
        path: TestResults/*.trx
        reporter: dotnet-trx

  terraform-plan:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    name: Terraform Plan
    
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.7"
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Terraform Init
      run: terraform init
    
    - name: Terraform Plan
      run: terraform plan -var="db_admin_password=${{ secrets.DB_ADMIN_PASSWORD }}" -var="jwt_secret_key=${{ secrets.JWT_SECRET_KEY }}"

  terraform-apply:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    name: Deploy Infrastructure
    
    defaults:
      run:
        working-directory: ./terraform
    
    outputs:
      resource_group_name: ${{ steps.terraform-output.outputs.resource_group_name }}
      api_url: ${{ steps.terraform-output.outputs.api_url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.7"
        terraform_wrapper: false
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Terraform Init
      run: terraform init
    
    - name: Terraform Apply
      run: terraform apply -auto-approve -var="db_admin_password=${{ secrets.DB_ADMIN_PASSWORD }}" -var="jwt_secret_key=${{ secrets.JWT_SECRET_KEY }}"
    
    - name: Get Terraform Outputs
      id: terraform-output
      run: |
        echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
        echo "api_url=$(terraform output -raw api_url)" >> $GITHUB_OUTPUT

  restart-containers:
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/main'
    name: Restart Application Containers
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Restart Container Instance
      run: |
        echo "Restarting container in resource group: ${{ needs.terraform-apply.outputs.resource_group_name }}"
        
        az container restart \
          --name user-management-api \
          --resource-group ${{ needs.terraform-apply.outputs.resource_group_name }}
        
        echo "Waiting for container to be ready..."
        sleep 30
        
        CONTAINER_STATE=$(az container show \
          --resource-group ${{ needs.terraform-apply.outputs.resource_group_name }} \
          --name user-management-api \
          --query "instanceView.state" \
          --output tsv)
        
        if [ "$CONTAINER_STATE" = "Running" ]; then
          echo "Container is running successfully"
          echo "API URL: ${{ needs.terraform-apply.outputs.api_url }}"
        else
          echo "Container failed to start properly. State: $CONTAINER_STATE"
          exit 1
        fi
